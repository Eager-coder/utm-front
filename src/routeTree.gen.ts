/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as SoloPilotIndexImport } from './routes/solo-pilot/index'
import { Route as RegAuthorityIndexImport } from './routes/reg-authority/index'
import { Route as PilotRegistrationIndexImport } from './routes/pilot-registration/index'
import { Route as OrgRegistrationIndexImport } from './routes/org-registration/index'
import { Route as OrgPilotIndexImport } from './routes/org-pilot/index'
import { Route as OrgDashboardIndexImport } from './routes/org-dashboard/index'
import { Route as LoginIndexImport } from './routes/login/index'
import { Route as SoloPilotNewFlightRequestImport } from './routes/solo-pilot/new-flight-request'
import { Route as SoloPilotDroneManagementImport } from './routes/solo-pilot/drone-management'
import { Route as RegAuthorityOrganizationsImport } from './routes/reg-authority/organizations'
import { Route as RegAuthorityFlightRequestManagementImport } from './routes/reg-authority/flight-request-management'
import { Route as PilotRegistrationSuccessImport } from './routes/pilot-registration/success'
import { Route as OrgRegistrationSuccessImport } from './routes/org-registration/success'
import { Route as OrgDashboardPilotsImport } from './routes/org-dashboard/pilots'
import { Route as OrgDashboardLiveMapImport } from './routes/org-dashboard/live-map'
import { Route as OrgDashboardFlightsImport } from './routes/org-dashboard/flights'
import { Route as OrgDashboardFlightRequestsImport } from './routes/org-dashboard/flight-requests'

// Create/Update Routes

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const SoloPilotIndexRoute = SoloPilotIndexImport.update({
  id: '/solo-pilot/',
  path: '/solo-pilot/',
  getParentRoute: () => rootRoute,
} as any)

const RegAuthorityIndexRoute = RegAuthorityIndexImport.update({
  id: '/reg-authority/',
  path: '/reg-authority/',
  getParentRoute: () => rootRoute,
} as any)

const PilotRegistrationIndexRoute = PilotRegistrationIndexImport.update({
  id: '/pilot-registration/',
  path: '/pilot-registration/',
  getParentRoute: () => rootRoute,
} as any)

const OrgRegistrationIndexRoute = OrgRegistrationIndexImport.update({
  id: '/org-registration/',
  path: '/org-registration/',
  getParentRoute: () => rootRoute,
} as any)

const OrgPilotIndexRoute = OrgPilotIndexImport.update({
  id: '/org-pilot/',
  path: '/org-pilot/',
  getParentRoute: () => rootRoute,
} as any)

const OrgDashboardIndexRoute = OrgDashboardIndexImport.update({
  id: '/org-dashboard/',
  path: '/org-dashboard/',
  getParentRoute: () => rootRoute,
} as any)

const LoginIndexRoute = LoginIndexImport.update({
  id: '/login/',
  path: '/login/',
  getParentRoute: () => rootRoute,
} as any)

const SoloPilotNewFlightRequestRoute = SoloPilotNewFlightRequestImport.update({
  id: '/solo-pilot/new-flight-request',
  path: '/solo-pilot/new-flight-request',
  getParentRoute: () => rootRoute,
} as any)

const SoloPilotDroneManagementRoute = SoloPilotDroneManagementImport.update({
  id: '/solo-pilot/drone-management',
  path: '/solo-pilot/drone-management',
  getParentRoute: () => rootRoute,
} as any)

const RegAuthorityOrganizationsRoute = RegAuthorityOrganizationsImport.update({
  id: '/reg-authority/organizations',
  path: '/reg-authority/organizations',
  getParentRoute: () => rootRoute,
} as any)

const RegAuthorityFlightRequestManagementRoute =
  RegAuthorityFlightRequestManagementImport.update({
    id: '/reg-authority/flight-request-management',
    path: '/reg-authority/flight-request-management',
    getParentRoute: () => rootRoute,
  } as any)

const PilotRegistrationSuccessRoute = PilotRegistrationSuccessImport.update({
  id: '/pilot-registration/success',
  path: '/pilot-registration/success',
  getParentRoute: () => rootRoute,
} as any)

const OrgRegistrationSuccessRoute = OrgRegistrationSuccessImport.update({
  id: '/org-registration/success',
  path: '/org-registration/success',
  getParentRoute: () => rootRoute,
} as any)

const OrgDashboardPilotsRoute = OrgDashboardPilotsImport.update({
  id: '/org-dashboard/pilots',
  path: '/org-dashboard/pilots',
  getParentRoute: () => rootRoute,
} as any)

const OrgDashboardLiveMapRoute = OrgDashboardLiveMapImport.update({
  id: '/org-dashboard/live-map',
  path: '/org-dashboard/live-map',
  getParentRoute: () => rootRoute,
} as any)

const OrgDashboardFlightsRoute = OrgDashboardFlightsImport.update({
  id: '/org-dashboard/flights',
  path: '/org-dashboard/flights',
  getParentRoute: () => rootRoute,
} as any)

const OrgDashboardFlightRequestsRoute = OrgDashboardFlightRequestsImport.update(
  {
    id: '/org-dashboard/flight-requests',
    path: '/org-dashboard/flight-requests',
    getParentRoute: () => rootRoute,
  } as any,
)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/org-dashboard/flight-requests': {
      id: '/org-dashboard/flight-requests'
      path: '/org-dashboard/flight-requests'
      fullPath: '/org-dashboard/flight-requests'
      preLoaderRoute: typeof OrgDashboardFlightRequestsImport
      parentRoute: typeof rootRoute
    }
    '/org-dashboard/flights': {
      id: '/org-dashboard/flights'
      path: '/org-dashboard/flights'
      fullPath: '/org-dashboard/flights'
      preLoaderRoute: typeof OrgDashboardFlightsImport
      parentRoute: typeof rootRoute
    }
    '/org-dashboard/live-map': {
      id: '/org-dashboard/live-map'
      path: '/org-dashboard/live-map'
      fullPath: '/org-dashboard/live-map'
      preLoaderRoute: typeof OrgDashboardLiveMapImport
      parentRoute: typeof rootRoute
    }
    '/org-dashboard/pilots': {
      id: '/org-dashboard/pilots'
      path: '/org-dashboard/pilots'
      fullPath: '/org-dashboard/pilots'
      preLoaderRoute: typeof OrgDashboardPilotsImport
      parentRoute: typeof rootRoute
    }
    '/org-registration/success': {
      id: '/org-registration/success'
      path: '/org-registration/success'
      fullPath: '/org-registration/success'
      preLoaderRoute: typeof OrgRegistrationSuccessImport
      parentRoute: typeof rootRoute
    }
    '/pilot-registration/success': {
      id: '/pilot-registration/success'
      path: '/pilot-registration/success'
      fullPath: '/pilot-registration/success'
      preLoaderRoute: typeof PilotRegistrationSuccessImport
      parentRoute: typeof rootRoute
    }
    '/reg-authority/flight-request-management': {
      id: '/reg-authority/flight-request-management'
      path: '/reg-authority/flight-request-management'
      fullPath: '/reg-authority/flight-request-management'
      preLoaderRoute: typeof RegAuthorityFlightRequestManagementImport
      parentRoute: typeof rootRoute
    }
    '/reg-authority/organizations': {
      id: '/reg-authority/organizations'
      path: '/reg-authority/organizations'
      fullPath: '/reg-authority/organizations'
      preLoaderRoute: typeof RegAuthorityOrganizationsImport
      parentRoute: typeof rootRoute
    }
    '/solo-pilot/drone-management': {
      id: '/solo-pilot/drone-management'
      path: '/solo-pilot/drone-management'
      fullPath: '/solo-pilot/drone-management'
      preLoaderRoute: typeof SoloPilotDroneManagementImport
      parentRoute: typeof rootRoute
    }
    '/solo-pilot/new-flight-request': {
      id: '/solo-pilot/new-flight-request'
      path: '/solo-pilot/new-flight-request'
      fullPath: '/solo-pilot/new-flight-request'
      preLoaderRoute: typeof SoloPilotNewFlightRequestImport
      parentRoute: typeof rootRoute
    }
    '/login/': {
      id: '/login/'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginIndexImport
      parentRoute: typeof rootRoute
    }
    '/org-dashboard/': {
      id: '/org-dashboard/'
      path: '/org-dashboard'
      fullPath: '/org-dashboard'
      preLoaderRoute: typeof OrgDashboardIndexImport
      parentRoute: typeof rootRoute
    }
    '/org-pilot/': {
      id: '/org-pilot/'
      path: '/org-pilot'
      fullPath: '/org-pilot'
      preLoaderRoute: typeof OrgPilotIndexImport
      parentRoute: typeof rootRoute
    }
    '/org-registration/': {
      id: '/org-registration/'
      path: '/org-registration'
      fullPath: '/org-registration'
      preLoaderRoute: typeof OrgRegistrationIndexImport
      parentRoute: typeof rootRoute
    }
    '/pilot-registration/': {
      id: '/pilot-registration/'
      path: '/pilot-registration'
      fullPath: '/pilot-registration'
      preLoaderRoute: typeof PilotRegistrationIndexImport
      parentRoute: typeof rootRoute
    }
    '/reg-authority/': {
      id: '/reg-authority/'
      path: '/reg-authority'
      fullPath: '/reg-authority'
      preLoaderRoute: typeof RegAuthorityIndexImport
      parentRoute: typeof rootRoute
    }
    '/solo-pilot/': {
      id: '/solo-pilot/'
      path: '/solo-pilot'
      fullPath: '/solo-pilot'
      preLoaderRoute: typeof SoloPilotIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/org-dashboard/flight-requests': typeof OrgDashboardFlightRequestsRoute
  '/org-dashboard/flights': typeof OrgDashboardFlightsRoute
  '/org-dashboard/live-map': typeof OrgDashboardLiveMapRoute
  '/org-dashboard/pilots': typeof OrgDashboardPilotsRoute
  '/org-registration/success': typeof OrgRegistrationSuccessRoute
  '/pilot-registration/success': typeof PilotRegistrationSuccessRoute
  '/reg-authority/flight-request-management': typeof RegAuthorityFlightRequestManagementRoute
  '/reg-authority/organizations': typeof RegAuthorityOrganizationsRoute
  '/solo-pilot/drone-management': typeof SoloPilotDroneManagementRoute
  '/solo-pilot/new-flight-request': typeof SoloPilotNewFlightRequestRoute
  '/login': typeof LoginIndexRoute
  '/org-dashboard': typeof OrgDashboardIndexRoute
  '/org-pilot': typeof OrgPilotIndexRoute
  '/org-registration': typeof OrgRegistrationIndexRoute
  '/pilot-registration': typeof PilotRegistrationIndexRoute
  '/reg-authority': typeof RegAuthorityIndexRoute
  '/solo-pilot': typeof SoloPilotIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/org-dashboard/flight-requests': typeof OrgDashboardFlightRequestsRoute
  '/org-dashboard/flights': typeof OrgDashboardFlightsRoute
  '/org-dashboard/live-map': typeof OrgDashboardLiveMapRoute
  '/org-dashboard/pilots': typeof OrgDashboardPilotsRoute
  '/org-registration/success': typeof OrgRegistrationSuccessRoute
  '/pilot-registration/success': typeof PilotRegistrationSuccessRoute
  '/reg-authority/flight-request-management': typeof RegAuthorityFlightRequestManagementRoute
  '/reg-authority/organizations': typeof RegAuthorityOrganizationsRoute
  '/solo-pilot/drone-management': typeof SoloPilotDroneManagementRoute
  '/solo-pilot/new-flight-request': typeof SoloPilotNewFlightRequestRoute
  '/login': typeof LoginIndexRoute
  '/org-dashboard': typeof OrgDashboardIndexRoute
  '/org-pilot': typeof OrgPilotIndexRoute
  '/org-registration': typeof OrgRegistrationIndexRoute
  '/pilot-registration': typeof PilotRegistrationIndexRoute
  '/reg-authority': typeof RegAuthorityIndexRoute
  '/solo-pilot': typeof SoloPilotIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/org-dashboard/flight-requests': typeof OrgDashboardFlightRequestsRoute
  '/org-dashboard/flights': typeof OrgDashboardFlightsRoute
  '/org-dashboard/live-map': typeof OrgDashboardLiveMapRoute
  '/org-dashboard/pilots': typeof OrgDashboardPilotsRoute
  '/org-registration/success': typeof OrgRegistrationSuccessRoute
  '/pilot-registration/success': typeof PilotRegistrationSuccessRoute
  '/reg-authority/flight-request-management': typeof RegAuthorityFlightRequestManagementRoute
  '/reg-authority/organizations': typeof RegAuthorityOrganizationsRoute
  '/solo-pilot/drone-management': typeof SoloPilotDroneManagementRoute
  '/solo-pilot/new-flight-request': typeof SoloPilotNewFlightRequestRoute
  '/login/': typeof LoginIndexRoute
  '/org-dashboard/': typeof OrgDashboardIndexRoute
  '/org-pilot/': typeof OrgPilotIndexRoute
  '/org-registration/': typeof OrgRegistrationIndexRoute
  '/pilot-registration/': typeof PilotRegistrationIndexRoute
  '/reg-authority/': typeof RegAuthorityIndexRoute
  '/solo-pilot/': typeof SoloPilotIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/org-dashboard/flight-requests'
    | '/org-dashboard/flights'
    | '/org-dashboard/live-map'
    | '/org-dashboard/pilots'
    | '/org-registration/success'
    | '/pilot-registration/success'
    | '/reg-authority/flight-request-management'
    | '/reg-authority/organizations'
    | '/solo-pilot/drone-management'
    | '/solo-pilot/new-flight-request'
    | '/login'
    | '/org-dashboard'
    | '/org-pilot'
    | '/org-registration'
    | '/pilot-registration'
    | '/reg-authority'
    | '/solo-pilot'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/org-dashboard/flight-requests'
    | '/org-dashboard/flights'
    | '/org-dashboard/live-map'
    | '/org-dashboard/pilots'
    | '/org-registration/success'
    | '/pilot-registration/success'
    | '/reg-authority/flight-request-management'
    | '/reg-authority/organizations'
    | '/solo-pilot/drone-management'
    | '/solo-pilot/new-flight-request'
    | '/login'
    | '/org-dashboard'
    | '/org-pilot'
    | '/org-registration'
    | '/pilot-registration'
    | '/reg-authority'
    | '/solo-pilot'
  id:
    | '__root__'
    | '/'
    | '/org-dashboard/flight-requests'
    | '/org-dashboard/flights'
    | '/org-dashboard/live-map'
    | '/org-dashboard/pilots'
    | '/org-registration/success'
    | '/pilot-registration/success'
    | '/reg-authority/flight-request-management'
    | '/reg-authority/organizations'
    | '/solo-pilot/drone-management'
    | '/solo-pilot/new-flight-request'
    | '/login/'
    | '/org-dashboard/'
    | '/org-pilot/'
    | '/org-registration/'
    | '/pilot-registration/'
    | '/reg-authority/'
    | '/solo-pilot/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  OrgDashboardFlightRequestsRoute: typeof OrgDashboardFlightRequestsRoute
  OrgDashboardFlightsRoute: typeof OrgDashboardFlightsRoute
  OrgDashboardLiveMapRoute: typeof OrgDashboardLiveMapRoute
  OrgDashboardPilotsRoute: typeof OrgDashboardPilotsRoute
  OrgRegistrationSuccessRoute: typeof OrgRegistrationSuccessRoute
  PilotRegistrationSuccessRoute: typeof PilotRegistrationSuccessRoute
  RegAuthorityFlightRequestManagementRoute: typeof RegAuthorityFlightRequestManagementRoute
  RegAuthorityOrganizationsRoute: typeof RegAuthorityOrganizationsRoute
  SoloPilotDroneManagementRoute: typeof SoloPilotDroneManagementRoute
  SoloPilotNewFlightRequestRoute: typeof SoloPilotNewFlightRequestRoute
  LoginIndexRoute: typeof LoginIndexRoute
  OrgDashboardIndexRoute: typeof OrgDashboardIndexRoute
  OrgPilotIndexRoute: typeof OrgPilotIndexRoute
  OrgRegistrationIndexRoute: typeof OrgRegistrationIndexRoute
  PilotRegistrationIndexRoute: typeof PilotRegistrationIndexRoute
  RegAuthorityIndexRoute: typeof RegAuthorityIndexRoute
  SoloPilotIndexRoute: typeof SoloPilotIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  OrgDashboardFlightRequestsRoute: OrgDashboardFlightRequestsRoute,
  OrgDashboardFlightsRoute: OrgDashboardFlightsRoute,
  OrgDashboardLiveMapRoute: OrgDashboardLiveMapRoute,
  OrgDashboardPilotsRoute: OrgDashboardPilotsRoute,
  OrgRegistrationSuccessRoute: OrgRegistrationSuccessRoute,
  PilotRegistrationSuccessRoute: PilotRegistrationSuccessRoute,
  RegAuthorityFlightRequestManagementRoute:
    RegAuthorityFlightRequestManagementRoute,
  RegAuthorityOrganizationsRoute: RegAuthorityOrganizationsRoute,
  SoloPilotDroneManagementRoute: SoloPilotDroneManagementRoute,
  SoloPilotNewFlightRequestRoute: SoloPilotNewFlightRequestRoute,
  LoginIndexRoute: LoginIndexRoute,
  OrgDashboardIndexRoute: OrgDashboardIndexRoute,
  OrgPilotIndexRoute: OrgPilotIndexRoute,
  OrgRegistrationIndexRoute: OrgRegistrationIndexRoute,
  PilotRegistrationIndexRoute: PilotRegistrationIndexRoute,
  RegAuthorityIndexRoute: RegAuthorityIndexRoute,
  SoloPilotIndexRoute: SoloPilotIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/org-dashboard/flight-requests",
        "/org-dashboard/flights",
        "/org-dashboard/live-map",
        "/org-dashboard/pilots",
        "/org-registration/success",
        "/pilot-registration/success",
        "/reg-authority/flight-request-management",
        "/reg-authority/organizations",
        "/solo-pilot/drone-management",
        "/solo-pilot/new-flight-request",
        "/login/",
        "/org-dashboard/",
        "/org-pilot/",
        "/org-registration/",
        "/pilot-registration/",
        "/reg-authority/",
        "/solo-pilot/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/org-dashboard/flight-requests": {
      "filePath": "org-dashboard/flight-requests.tsx"
    },
    "/org-dashboard/flights": {
      "filePath": "org-dashboard/flights.tsx"
    },
    "/org-dashboard/live-map": {
      "filePath": "org-dashboard/live-map.tsx"
    },
    "/org-dashboard/pilots": {
      "filePath": "org-dashboard/pilots.tsx"
    },
    "/org-registration/success": {
      "filePath": "org-registration/success.tsx"
    },
    "/pilot-registration/success": {
      "filePath": "pilot-registration/success.tsx"
    },
    "/reg-authority/flight-request-management": {
      "filePath": "reg-authority/flight-request-management.tsx"
    },
    "/reg-authority/organizations": {
      "filePath": "reg-authority/organizations.tsx"
    },
    "/solo-pilot/drone-management": {
      "filePath": "solo-pilot/drone-management.tsx"
    },
    "/solo-pilot/new-flight-request": {
      "filePath": "solo-pilot/new-flight-request.tsx"
    },
    "/login/": {
      "filePath": "login/index.tsx"
    },
    "/org-dashboard/": {
      "filePath": "org-dashboard/index.tsx"
    },
    "/org-pilot/": {
      "filePath": "org-pilot/index.tsx"
    },
    "/org-registration/": {
      "filePath": "org-registration/index.tsx"
    },
    "/pilot-registration/": {
      "filePath": "pilot-registration/index.tsx"
    },
    "/reg-authority/": {
      "filePath": "reg-authority/index.tsx"
    },
    "/solo-pilot/": {
      "filePath": "solo-pilot/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
